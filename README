$Id$

AUTHORS
------------------------------------------------------------------------------
Tom: tom@dbservice.com (98% of code)
Cubicool: jeremy@emperorlinux.com (2% of code)


INTRODUCTION
------------------------------------------------------------------------------

Welcome to yukon! If you haven't done so already, please go take a look at:

	http://www.neopsis.com/projects/yukon

This site typically covers all the basics of setup, configuration, and
troubleshooting. However, this document will act as a supplement to that
information.

First and foremost, you MUST have libseom installed! Yukon is now built and
linked against Seom, and will not run otherwise. Second of all, please
realize that Yukon and Seom are still beta applications, and so there
will be bugs. ;)


BUILDING
------------------------------------------------------------------------------

Use the 'build.sh' script to compile and install yukon. The script uses two
environment variables if they are present: 'CC' and 'LIBPATH'. Usually you
don't need to set them, but if you have a 64bit userspace and want to
compile yukon into a 32bit library, you need to set 'CC="gcc -m32"' and
'LIBPATH="lib32"', so that the compiler knows to produce 32bit objects and
where it can find the 32bit libX11.so and libGL.so.

Note that some distributions don't have libX11.so under /usr/lib32 (gentoo
for example). On such systems you need to copy the 32bit libX11.so to
/usr/lib32 or make a symlink from /usr/lib32/libX11.so to the real location.
On gentoo that would be (as root):

	$ ln -s /emul/linux/x86/usr/lib/libX11.so /usr/lib32/libX11.so

Once the build completes, you'll notice a new directory called .yukon has
been created in your HOME directory. Don't worry too much about it's 
purpose for now, it is mainly there to facilitate the libGL interception
Yukon must implement to function properly.


RUNNING
------------------------------------------------------------------------------

Explaining "how" yukon works can be little difficult--therefore, we've
provided a wrapper script written in Bash that you can use to greatly
simplifiy matters. Just run the "yukon" script (found here in the tools
directory, or perhaps installed locally in your path) with your application
and it's parameters following. For example:

	$ ./tools/yukon glxgears -printfps

For those interested, Yukon works by intercepting calls to glXSwapBuffers
and, before invoking the real function, copies the color buffer and makes a
simple image stream out of it, which you can feed to a server or write to disk
directly.


CONFIGURATION
------------------------------------------------------------------------------

You'll probably want to use the yukon.conf file in the tools directory as
a starting point for you own configuration setups. However, the following
briefly describes what goes on when Yukon is invoked.

1. Yukon checks for the file /etc/yukon.conf
2. Yukon checks for the file $HOME/.yukon/conf; these values
   override the system defaults.
3. Yukon checks for the various YUKON_* environment variables. These
   values override anything else, and is the method I use personally. :)
4. Lastly, Yukon will use the protocol specified by the OUTPUT configuration
   setting to determine "what to do" with the image stream.

While setting configuration parameters in /etc/yukon.conf or $HOME/.yukon/conf
is fairly straightforward, using environment variables can be slightly more
tricky. Basically, each option available to Yukon can also be overridden
using it's named prefixed with YUKON_ in a shell. For example, if you wanted
to run glxgears and use Yukon's verbose logging, try running:

	$ YUKON_VERBOSE=true ./tools/yukon glxgears

For variables that contain spaces, enclose the correspond shell declaration
in double quotes, i.e.:

	$ YUKON_INSETS="10 10 10 10" yukon glxgears
