$Id$

AUTHORS
------------------------------------------------------------------------------
Tomas Carnecky (tom@dbservice.com)
Jeremy L. Moles (jeremy@emperorlinux.com)


INTRODUCTION
------------------------------------------------------------------------------

Welcome to yukon! If you haven't done so already, please go take a look at:

	http://www.neopsis.com/projects/yukon

This site typically covers all the basics of setup, configuration, and
troubleshooting. However, this document will act as a supplement to that
information.

First and foremost, you MUST have libseom installed! Yukon is now built and
linked against Seom, and will not run otherwise. Second of all, please
realize that Yukon and Seom are still beta applications, and so there
will be bugs. ;)


BUILDING
------------------------------------------------------------------------------

Yukon is a simple 'Makefile' project. Meaning that it can be built and
installed using:

	$ make && sudo make install

If you want to cross-compile, set CC and LIBDIR on the make command-line.
For example, the following command-line will correctly install the 32bit
version of yukon in a 64bit userspace: 

	$ make CC="gcc -m32" && sudo make install LIBDIR="lib32"


RUNNING
------------------------------------------------------------------------------

Explaining "how" yukon works can be little difficult--therefore, we've
provided a wrapper script written in Bash that you can use to greatly
simplify matters. Just run the "yukon" script (installed into $PREFIX/bin)
with your application and it's parameters following. For example:

	$ yukon glxgears


CONFIGURATION
------------------------------------------------------------------------------

You'll probably want to use the yukon.conf file in the tools directory as
a starting point for you own configuration setups. However, the following
briefly describes what goes on when Yukon is invoked.

1. Yukon parses configuration from /etc/yukon.conf
2. Yukon parses configuration from $HOME/.yukon/conf
3. Yukon parses the various YUKON_* environment variables.

In each step, yukon overrides options defined before, eg. environment
variables override everything else.

While setting configuration parameters in /etc/yukon.conf or $HOME/.yukon/conf
is fairly straightforward, using environment variables can be slightly more
tricky. Basically, each option available to Yukon can also be overridden
using it's named prefixed with YUKON_ in a shell. For example, if you wanted
to run glxgears and use Yukon's verbose logging, try running:

	$ YUKON_VERBOSE=5 yukon glxgears

For variables that contain spaces, enclose the correspond shell declaration
in double quotes, i.e.:

	$ YUKON_INSETS="10 10 10 10" yukon glxgears
